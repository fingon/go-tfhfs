// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package ibtree

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Key) DecodeMsg(dc *msgp.Reader) (err error) {

	{
		var zgensym_de369412a632e4d3_0 string
		zgensym_de369412a632e4d3_0, err = dc.ReadString()
		(*z) = Key(zgensym_de369412a632e4d3_0)
	}
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Key) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteString(string(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Key) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Key) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Key) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_de369412a632e4d3_1 string
		zgensym_de369412a632e4d3_1, bts, err = nbs.ReadStringBytes(bts)

		if err != nil {
			return
		}
		(*z) = Key(zgensym_de369412a632e4d3_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Key) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NodeData) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_de369412a632e4d3_3 uint32
	zgensym_de369412a632e4d3_3, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_de369412a632e4d3_3 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_de369412a632e4d3_3}
		return
	}
	z.Leafy, err = dc.ReadBool()
	if err != nil {
		return
	}
	var zgensym_de369412a632e4d3_4 uint32
	zgensym_de369412a632e4d3_4, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Children) >= int(zgensym_de369412a632e4d3_4) {
		z.Children = (z.Children)[:zgensym_de369412a632e4d3_4]
	} else {
		z.Children = make([]*NodeDataChild, zgensym_de369412a632e4d3_4)
	}
	for zgensym_de369412a632e4d3_2 := range z.Children {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}

			z.Children[zgensym_de369412a632e4d3_2] = nil
		} else if kptr, dup := dc.DedupReadIsDup("z.Children[zgensym_de369412a632e4d3_2]", "*NodeDataChild"); dup {
			z.Children[zgensym_de369412a632e4d3_2] = kptr.(*NodeDataChild)
		} else {
			if z.Children[zgensym_de369412a632e4d3_2] == nil {
				z.Children[zgensym_de369412a632e4d3_2] = new(NodeDataChild)
			}
			dc.DedupIndexEachPtr(z.Children[zgensym_de369412a632e4d3_2])

			var zgensym_de369412a632e4d3_5 uint32
			zgensym_de369412a632e4d3_5, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if zgensym_de369412a632e4d3_5 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zgensym_de369412a632e4d3_5}
				return
			}
			{
				var zgensym_de369412a632e4d3_6 string
				zgensym_de369412a632e4d3_6, err = dc.ReadString()
				z.Children[zgensym_de369412a632e4d3_2].Key = Key(zgensym_de369412a632e4d3_6)
			}
			if err != nil {
				return
			}
			z.Children[zgensym_de369412a632e4d3_2].Value, err = dc.ReadString()
			if err != nil {
				return
			}
		}
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z *NodeData) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return err
	}
	err = en.WriteBool(z.Leafy)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Children)))
	if err != nil {
		return
	}
	for zgensym_de369412a632e4d3_2 := range z.Children {
		// gPtr.encodeGen():

		if z.Children[zgensym_de369412a632e4d3_2] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// record the pointer for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Children[zgensym_de369412a632e4d3_2])
			if err != nil {
				return
			}
			if !dup {

				// array header, size 2
				err = en.Append(0x92)
				if err != nil {
					return err
				}
				err = en.WriteString(string(z.Children[zgensym_de369412a632e4d3_2].Key))
				if err != nil {
					return
				}
				err = en.WriteString(z.Children[zgensym_de369412a632e4d3_2].Value)
				if err != nil {
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NodeData) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendBool(o, z.Leafy)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Children)))
	for zgensym_de369412a632e4d3_2 := range z.Children {
		// marshalGen.gPtr()

		if z.Children[zgensym_de369412a632e4d3_2] == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			// array header, size 2
			o = append(o, 0x92)
			o = msgp.AppendString(o, string(z.Children[zgensym_de369412a632e4d3_2].Key))
			o = msgp.AppendString(o, z.Children[zgensym_de369412a632e4d3_2].Value)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *NodeData) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_de369412a632e4d3_7 uint32
	zgensym_de369412a632e4d3_7, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_de369412a632e4d3_7 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_de369412a632e4d3_7}
		return
	}
	z.Leafy, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	if nbs.AlwaysNil {
		(z.Children) = (z.Children)[:0]
	} else {

		var zgensym_de369412a632e4d3_8 uint32
		zgensym_de369412a632e4d3_8, bts, err = nbs.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if cap(z.Children) >= int(zgensym_de369412a632e4d3_8) {
			z.Children = (z.Children)[:zgensym_de369412a632e4d3_8]
		} else {
			z.Children = make([]*NodeDataChild, zgensym_de369412a632e4d3_8)
		}
		for zgensym_de369412a632e4d3_2 := range z.Children {
			// default gPtr logic.
			if nbs.PeekNil(bts) && z.Children[zgensym_de369412a632e4d3_2] == nil {
				// consume the nil
				bts, err = nbs.ReadNilBytes(bts)
				if err != nil {
					return
				}
			} else {
				// read as-if the wire has bytes, letting nbs take care of nils.

				if z.Children[zgensym_de369412a632e4d3_2] == nil {
					z.Children[zgensym_de369412a632e4d3_2] = new(NodeDataChild)
				}

				var zgensym_de369412a632e4d3_9 uint32
				zgensym_de369412a632e4d3_9, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if zgensym_de369412a632e4d3_9 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zgensym_de369412a632e4d3_9}
					return
				}
				{
					var zgensym_de369412a632e4d3_10 string
					zgensym_de369412a632e4d3_10, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.Children[zgensym_de369412a632e4d3_2].Key = Key(zgensym_de369412a632e4d3_10)
				}
				z.Children[zgensym_de369412a632e4d3_2].Value, bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
			}
		}
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NodeData) Msgsize() (s int) {
	s = 1 + msgp.BoolSize + msgp.ArrayHeaderSize
	for zgensym_de369412a632e4d3_2 := range z.Children {
		if z.Children[zgensym_de369412a632e4d3_2] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + msgp.StringPrefixSize + len(string(z.Children[zgensym_de369412a632e4d3_2].Key)) + msgp.StringPrefixSize + len(z.Children[zgensym_de369412a632e4d3_2].Value)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NodeDataChild) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_de369412a632e4d3_11 uint32
	zgensym_de369412a632e4d3_11, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_de369412a632e4d3_11 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_de369412a632e4d3_11}
		return
	}
	{
		var zgensym_de369412a632e4d3_12 string
		zgensym_de369412a632e4d3_12, err = dc.ReadString()
		z.Key = Key(zgensym_de369412a632e4d3_12)
	}
	if err != nil {
		return
	}
	z.Value, err = dc.ReadString()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z NodeDataChild) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return err
	}
	err = en.WriteString(string(z.Key))
	if err != nil {
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NodeDataChild) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendString(o, string(z.Key))
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeDataChild) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *NodeDataChild) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_de369412a632e4d3_13 uint32
	zgensym_de369412a632e4d3_13, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_de369412a632e4d3_13 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_de369412a632e4d3_13}
		return
	}
	{
		var zgensym_de369412a632e4d3_14 string
		zgensym_de369412a632e4d3_14, bts, err = nbs.ReadStringBytes(bts)

		if err != nil {
			return
		}
		z.Key = Key(zgensym_de369412a632e4d3_14)
	}
	z.Value, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NodeDataChild) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(string(z.Key)) + msgp.StringPrefixSize + len(z.Value)
	return
}
