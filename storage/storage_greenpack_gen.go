// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package storage

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BlockMetadata) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_618cdf9ee25e938f_0 uint32
	zgensym_618cdf9ee25e938f_0, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_618cdf9ee25e938f_0 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_618cdf9ee25e938f_0}
		return
	}
	z.RefCount, err = dc.ReadInt32()
	if err != nil {
		return
	}
	{
		var zgensym_618cdf9ee25e938f_1 byte
		zgensym_618cdf9ee25e938f_1, err = dc.ReadByte()
		z.Status = BlockStatus(zgensym_618cdf9ee25e938f_1)
	}
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z BlockMetadata) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return err
	}
	err = en.WriteInt32(z.RefCount)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.Status))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BlockMetadata) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt32(o, z.RefCount)
	o = msgp.AppendByte(o, byte(z.Status))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockMetadata) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *BlockMetadata) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_618cdf9ee25e938f_2 uint32
	zgensym_618cdf9ee25e938f_2, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_618cdf9ee25e938f_2 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_618cdf9ee25e938f_2}
		return
	}
	z.RefCount, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	{
		var zgensym_618cdf9ee25e938f_3 byte
		zgensym_618cdf9ee25e938f_3, bts, err = nbs.ReadByteBytes(bts)

		if err != nil {
			return
		}
		z.Status = BlockStatus(zgensym_618cdf9ee25e938f_3)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BlockMetadata) Msgsize() (s int) {
	s = 1 + msgp.Int32Size + msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BlockStatus) DecodeMsg(dc *msgp.Reader) (err error) {

	{
		var zgensym_618cdf9ee25e938f_4 byte
		zgensym_618cdf9ee25e938f_4, err = dc.ReadByte()
		(*z) = BlockStatus(zgensym_618cdf9ee25e938f_4)
	}
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z BlockStatus) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteByte(byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BlockStatus) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *BlockStatus) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_618cdf9ee25e938f_5 byte
		zgensym_618cdf9ee25e938f_5, bts, err = nbs.ReadByteBytes(bts)

		if err != nil {
			return
		}
		(*z) = BlockStatus(zgensym_618cdf9ee25e938f_5)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BlockStatus) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NameMapBlock) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_618cdf9ee25e938f_8 uint32
	zgensym_618cdf9ee25e938f_8, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_618cdf9ee25e938f_8 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_618cdf9ee25e938f_8}
		return
	}
	var zgensym_618cdf9ee25e938f_9 uint32
	zgensym_618cdf9ee25e938f_9, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	if z.NameToBlockId == nil && zgensym_618cdf9ee25e938f_9 > 0 {
		z.NameToBlockId = make(map[string]string, zgensym_618cdf9ee25e938f_9)
	} else if len(z.NameToBlockId) > 0 {
		for key, _ := range z.NameToBlockId {
			delete(z.NameToBlockId, key)
		}
	}
	for zgensym_618cdf9ee25e938f_9 > 0 {
		zgensym_618cdf9ee25e938f_9--
		var zgensym_618cdf9ee25e938f_6 string
		var zgensym_618cdf9ee25e938f_7 string
		zgensym_618cdf9ee25e938f_6, err = dc.ReadString()
		if err != nil {
			return
		}
		zgensym_618cdf9ee25e938f_7, err = dc.ReadString()
		if err != nil {
			return
		}
		z.NameToBlockId[zgensym_618cdf9ee25e938f_6] = zgensym_618cdf9ee25e938f_7
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z *NameMapBlock) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteMapHeader(uint32(len(z.NameToBlockId)))
	if err != nil {
		return
	}
	for zgensym_618cdf9ee25e938f_6, zgensym_618cdf9ee25e938f_7 := range z.NameToBlockId {
		err = en.WriteString(zgensym_618cdf9ee25e938f_6)
		if err != nil {
			return
		}
		err = en.WriteString(zgensym_618cdf9ee25e938f_7)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NameMapBlock) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendMapHeader(o, uint32(len(z.NameToBlockId)))
	for zgensym_618cdf9ee25e938f_6, zgensym_618cdf9ee25e938f_7 := range z.NameToBlockId {
		o = msgp.AppendString(o, zgensym_618cdf9ee25e938f_6)
		o = msgp.AppendString(o, zgensym_618cdf9ee25e938f_7)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NameMapBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *NameMapBlock) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_618cdf9ee25e938f_10 uint32
	zgensym_618cdf9ee25e938f_10, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_618cdf9ee25e938f_10 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_618cdf9ee25e938f_10}
		return
	}
	if nbs.AlwaysNil {
		if len(z.NameToBlockId) > 0 {
			for key, _ := range z.NameToBlockId {
				delete(z.NameToBlockId, key)
			}
		}

	} else {

		var zgensym_618cdf9ee25e938f_11 uint32
		zgensym_618cdf9ee25e938f_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
		if z.NameToBlockId == nil && zgensym_618cdf9ee25e938f_11 > 0 {
			z.NameToBlockId = make(map[string]string, zgensym_618cdf9ee25e938f_11)
		} else if len(z.NameToBlockId) > 0 {
			for key, _ := range z.NameToBlockId {
				delete(z.NameToBlockId, key)
			}
		}
		for zgensym_618cdf9ee25e938f_11 > 0 {
			var zgensym_618cdf9ee25e938f_6 string
			var zgensym_618cdf9ee25e938f_7 string
			zgensym_618cdf9ee25e938f_11--
			zgensym_618cdf9ee25e938f_6, bts, err = nbs.ReadStringBytes(bts)
			if err != nil {
				return
			}
			zgensym_618cdf9ee25e938f_7, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
			z.NameToBlockId[zgensym_618cdf9ee25e938f_6] = zgensym_618cdf9ee25e938f_7
		}
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NameMapBlock) Msgsize() (s int) {
	s = 1 + msgp.MapHeaderSize
	if z.NameToBlockId != nil {
		for zgensym_618cdf9ee25e938f_6, zgensym_618cdf9ee25e938f_7 := range z.NameToBlockId {
			_ = zgensym_618cdf9ee25e938f_7
			_ = zgensym_618cdf9ee25e938f_6
			s += msgp.StringPrefixSize + len(zgensym_618cdf9ee25e938f_6) + msgp.StringPrefixSize + len(zgensym_618cdf9ee25e938f_7)
		}
	}
	return
}
